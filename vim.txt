b到词首
w到下一个单词首
e到词尾
e与w不同的是：比如说de会删除到词尾，dw会删除到下一个单词首的前一个位置（不会删除下一个单词首）,也就是删除到词尾+一个空格；
"the test for e/w"  -> de -> " test for e/w"
"the test for e/w"  -> dw -> "test for e/w"

vim动作指令：
w代表word，p代表段落


vim操作符：
c,d,y
gU:转换为大写
gu:转换为小写
g~:反转大小写
>:增加缩进
<:减少缩进
=:自动缩进
!:使用外部程序过滤{motion}所跨越的行

操作符+动作指令=操作
d{motion}，dl,diw,dip;


C-a:数字加, 光标不在数字上，会自动正向调到数字上，可以与重复次数使用
C-x:数字减


插入模式：
C-h:删除前一个字符
C-w:删除前一个单词
C-u:删完一行

ESC/C-[ :切换到普通模式

"
Practical Vim, by Drew Neil
Read Drew Neil's Practical Vim.
"

yt, 将Practical Vim,复制到复制专用寄存器，然后<C-r>0把文本粘贴到光标所在位置，一般命令格式为<C-r>{register},{register}为想要插入的寄存器的名字
<C-r><C-p>{register}: 更智能的粘贴，按原义插入寄存器内容并修正任何不必要的缩进

<C-r>={expression}<CR>:表达式寄存器，输出expression的结果

使用字符编码插入字符：
<C-v>{code}:使用字符编码插入字符，vim所接受的字符编码共包含3位数字，如<C-v>065 -> A; 如果想插入超过3位字符，可以使用4位十六进制编码，即输入<C-v>u{1234},如<C-v>u00bf -> ¿;如果想知道文档中任意字符的编码，只需要将光标移到上面并按ga即可；
<C-v>{123}:以十进制字符编码插入字符；
<C-v>u{1234}:以十六进制字符编码插入字符；
<C-v>{nondigit}:按原义插入非数字字符；
<C-k>{char1}{char2}:插入以二合字母{char1}{char2}表示的字符；
二合字母(digraph)用起来更方便,:h digraphs-default查看二合字母集文档,:digraphs/:h digraph-table查看字符字典；
<C-k>14 -> ¼;


替换模式：
R键进入插入模式，也可以使用insert键；
gR:虚拟替换模式,会按照屏幕上实际的宽度来替换字符，而不是按文件中所保存的字符进行替换，这样会减少意外的发生，所以一般推荐使用虚拟替换模式；
r{char}和gr{char}:覆盖一个字符然后返回普通模式；

可视模式：
v:选中当前字符,重复两次则回到普通模式；
V:选中当前整行,重复两次则回到普通模式；
<C-v>:选中块,重复两次则回到普通模式；
gv:重选上次的高亮选区
o:切换高亮选区的活动端，即切换选区的两端；

U:可视模式下将字母转换为大写；
:normal +普通模式下命令：可以在可视模式下生效普通模式的命令，如可以多行添加文本等；
<C-v>模式下使用I/A命令可以在所有块的前/后添加文本；
<C-v>模式下使用C命令可以在同时编辑所有块的内容；
i/a在可视模式下会被当做是文本对象的组成部分，不能进入插入模式,进入插入模式使用I/A；

gh/gH: 进入选择模式,看起来像是可视模式，但不同得是在选择模式下输入任意可见字符都会替换内容并切换到插入模式,使用的较少；


命令模式：
在命令行执行的命令又称为Ex命令；
:h ex-cmd-index: 查看完整Ex命令列表；

:[range]delete [x]: 删除指定范围内的行,从range开始的x行；
:[range]yank [x]: 复制指定范围内的行,从range开始的x行；
:[line]put [x]: 在指定行后粘贴寄存器x中的内容；
:[range]copy {address}: 把指定范围内的行拷贝到{address}所指定的行中；
:[range]move {address}: 把指定范围内的行移动到{address}所指定的行中；
:[range]join: 连接指定范围内的行；
:[range]normal {commands}: 对指定范围的每一行执行普通模式命令{commands}；
:[range]substitute/{pattern}/{string}/[flags]: 把指定范围内出现{pattern}的地方替换为string；
:[range]global/{pattern}/[cmd]: 对指定范围的匹配{pattern}的所有行，在其上执行Ex 命令{cmd}；
有些插入模式中的命令也可以在命令行使用，比如：<C-w>,<C-u>,<C-v>,<C-k>,<C-r>{register}等；

[range]可以是行号([1,3]表示1到3行)，位置标记或查找模式来指定；
{address}可以是一个行号，一个位置标记，或者查找模式；
range的一般格式为:{start},{end}；

地址指定范围:
如行号,.,$,%等；
符号.表示当前行;%表示当前文件中所有行;0表示虚拟行，位于文件第一行上方; 'm表示包含位置标记m的行；
:%s/a/b: 把每一行的第一个a换成b, s为substitute缩写；

可视模式高亮选中指定范围:
再输入Ex命令, :'<,'>；其中'<表示选区首行位置标记，'>表示尾行位置标记；

用模式指定范围：
:/<html>/,/<\/html>/p: 由<html>所在行开始，</html>所在行结束；

使用偏移对地址进行修正：
:/<html>/+1,/<\/html>/-1p;
:.,.+3p;当前行到往下3行的位置；


:[range]copy {address}: 把指定范围内的行拷贝到{address}所指定的行中；
使用:t复制行：
:copy简写形式为:t,:co ;
:6t. 把第6行复制到当前行下方；
:t6  把当前行复制到第6行下方；
:t.  相当于yyp, 但yyp会使用寄存器，
		 而:t.不会,当不想覆盖寄存器的内容时可以使用:t.来复制；
:t$  把当前行复制到文本结尾；
:'<,'>t0  把高亮选中的行复制到文件开头；
复制距离较远时，:t更有效；


:[range]move {address}: 把指定范围内的行移动到{address}所指定的行中；
使用:m移动行：

@:来执行上次的Ex命令，运行过一次@:之后，可以使用@@来重复命令；
:normal可以执行普通模式的任意命令,Ex命令作用范围更广，距离更远，使用:normal与具有强大表现力的普通模式命令结合；

<C-r><C-w>：会复制光标下的单词并把他插入到vim命令行；
{commands} | {commands}：合并多条命令；
q:命令查看历史命令，可以通过vim编辑修改命令，然后<CR>运行；
在命令行模式输入时，按<C-f>在保留已输入命令的情况下查看命令行窗口；
q/打开查找命令历史窗口；

在命令前加上!可以调用外部shell程序；
在调用外部程序时，%表示当前文件名，执行当前文件!python %；
vim也提供了一组文件名修饰符，可以在文件名中提取文件路径或扩展名之类的，详见:h filename-modifiers；

<C-z>可以在bash中挂起某个进程，然后jobs可以查看stopped的进程，fg可以将后台挂起进程唤醒；

将缓冲区内容作为标准输入或输出：
:read !{cmd}：可以把shell命令的输出读入当前缓冲区中；
:write !{cmd}：与read相反，把当前缓冲区内容作为指定{cmd}的标准输入，应该只是部分指定命令支持；
:[range]write !{cmd}：以range作为标准输入执行shell命令cmd；

使用外部命令过滤缓冲区内容：
:[range]!{filter}：range中的指定文本会被指定的{cmd}进行过滤，如sort，作为sort的输入，sort的输出会代替原本range的内容；
:2,$!sort -t',' -k2：将第二行到最后一行sort进行排序，-t',' -k2位sort的参数；

Vim提供了一种方便的快捷方式设置:[range]!{filter}命令中的范围，可以用!{motion}操作符，比如将光标放在某一行，然后执行!G，vim就会打开命令行并输入:.,$!预置命令；


98/314
