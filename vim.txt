b到词首
w到下一个单词首
e到词尾
e与w不同的是：比如说de会删除到词尾，dw会删除到下一个单词首的前一个位置（不会删除下一个单词首）,也就是删除到词尾+一个空格；
"the test for e/w"  -> de -> " test for e/w"
"the test for e/w"  -> dw -> "test for e/w"

vim动作指令：
w代表word，p代表段落


vim操作符：
c,d,y
gU:转换为大写
gu:转换为小写
g~:反转大小写
>:增加缩进
<:减少缩进
=:自动缩进
!:使用外部程序过滤{motion}所跨越的行

操作符+动作指令=操作
d{motion}，dl,diw,dip;


C-a:数字加, 光标不在数字上，会自动正向调到数字上，可以与重复次数使用
C-x:数字减


插入模式：
C-h:删除前一个字符
C-w:删除前一个单词
C-u:删完一行

ESC/C-[ :切换到普通模式

"
Practical Vim, by Drew Neil
Read Drew Neil's Practical Vim.
"

yt, 将Practical Vim,复制到复制专用寄存器，然后<C-r>0把文本粘贴到光标所在位置，一般命令格式为<C-r>{register},{register}为想要插入的寄存器的名字
<C-r><C-p>{register}: 更智能的粘贴，按原义插入寄存器内容并修正任何不必要的缩进

<C-r>={expression}<CR>:表达式寄存器，输出expression的结果

使用字符编码插入字符：
<C-v>{code}:使用字符编码插入字符，vim所接受的字符编码共包含3位数字，如<C-v>065 -> A; 如果想插入超过3位字符，可以使用4位十六进制编码，即输入<C-v>u{1234},如<C-v>u00bf -> ¿;如果想知道文档中任意字符的编码，只需要将光标移到上面并按ga即可；
<C-v>{123}:以十进制字符编码插入字符；
<C-v>u{1234}:以十六进制字符编码插入字符；
<C-v>{nondigit}:按原义插入非数字字符；
<C-k>{char1}{char2}:插入以二合字母{char1}{char2}表示的字符；
二合字母(digraph)用起来更方便,:h digraphs-default查看二合字母集文档,:digraphs/:h digraph-table查看字符字典；
<C-k>14 -> ¼;


替换模式：
R键进入插入模式，也可以使用insert键；
gR:虚拟替换模式,会按照屏幕上实际的宽度来替换字符，而不是按文件中所保存的字符进行替换，这样会减少意外的发生，所以一般推荐使用虚拟替换模式；
r{char}和gr{char}:覆盖一个字符然后返回普通模式；

可视模式：
v:选中当前字符,重复两次则回到普通模式；
V:选中当前整行,重复两次则回到普通模式；
<C-v>:选中块,重复两次则回到普通模式；
gv:重选上次的高亮选区
o:切换高亮选区的活动端，即切换选区的两端；

U:可视模式下将字母转换为大写；
:normal +普通模式下命令：可以在可视模式下生效普通模式的命令，如可以多行添加文本等；
<C-v>模式下使用I/A命令可以在所有块的前/后添加文本；
<C-v>模式下使用C命令可以在同时编辑所有块的内容；
i/a在可视模式下会被当做是文本对象的组成部分，不能进入插入模式,进入插入模式使用I/A；

gh/gH: 进入选择模式,看起来像是可视模式，但不同得是在选择模式下输入任意可见字符都会替换内容并切换到插入模式,使用的较少；


命令模式：
在命令行执行的命令又称为Ex命令；
:h ex-cmd-index: 查看完整Ex命令列表；

75/314


